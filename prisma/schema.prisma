generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum InvitationStatus {
  PENDING
  CANCELLED_BY_SENDER
  ACCEPTED
  DECLINED
}

model User {
  id String @id @default(cuid())

  pseudo String @unique

  email         String    @unique
  emailVerified DateTime?

  role Role @default(USER)

  passwordHash String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions    Session[]
  family      UserFamily[]
  events      FamilyEventParticipant[]
  sentInvites Invitation[]
}

model Invitation {
  id String @id @default(cuid())

  message String? @db.Text

  status InvitationStatus @default(PENDING)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  familyId String
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  invitedEmail String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([familyId, invitedEmail])
}

model Session {
  id String @id @default(cuid())

  expiresAt DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserFamily {
  id String @id @default(cuid())

  role Role @default(USER)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  familyId String
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([userId, familyId])
}

model Family {
  id String @id @default(cuid())

  name        String
  description String?

  members     UserFamily[]
  events      FamilyEvent[]
  invitations Invitation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model FamilyEventParticipant {
  id String @id @default(cuid())

  eventId String
  event   FamilyEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([eventId, userId])
}

model FamilyEvent {
  id String @id @default(cuid())

  title       String
  description String?
  date        DateTime @default(now())
  location    String?

  participants FamilyEventParticipant[]

  familyId String
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
